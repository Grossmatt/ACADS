/* Generated by the Nim Compiler v1.2.0 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI6253 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6241 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6223 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI624016 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6249 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6243 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6219 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6233 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6237 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI143 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI160043 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI6008 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6286 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI114 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI6281 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI6217 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6221 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI149 = {size: 0,kind: 34,base: null,node: null,finalizer: null};
var NTI6227 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI112 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI10300219 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
NTI10300219.base = NTI112;
var NNI6227 = {kind: 1, offset: "errorCode", len: 0, typ: NTI149, name: "errorCode", sons: null};
NTI6227.node = NNI6227;
var NNI6221 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6221.node = NNI6221;
NTI6281.base = NTI6217;
NTI6286.base = NTI6217;
var NNI6217 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI6281, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI114, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI112, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI112, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI6286, name: "up", sons: null}]};
NTI6217.node = NNI6217;
var NNI6008 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6008.node = NNI6008;
NTI6217.base = NTI6008;
NTI6221.base = NTI6217;
NTI6227.base = NTI6221;
var NNI160043 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI114, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI143, name: "Field1", sons: null}]};
NTI160043.node = NNI160043;
var NNI6237 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6237.node = NNI6237;
var NNI6233 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6233.node = NNI6233;
var NNI6219 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6219.node = NNI6219;
NTI6219.base = NTI6217;
NTI6233.base = NTI6219;
NTI6237.base = NTI6233;
var NNI6243 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6243.node = NNI6243;
NTI6243.base = NTI6221;
var NNI6249 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6249.node = NNI6249;
NTI6249.base = NTI6219;
var NNI624016 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI624016.node = NNI624016;
var NNI6223 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6223.node = NNI6223;
NTI6223.base = NTI6221;
NTI624016.base = NTI6223;
var NNI6241 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6241.node = NNI6241;
NTI6241.base = NTI6219;
var NNI6253 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6253.node = NNI6253;
NTI6253.base = NTI6219;
function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);
function nimCopy(dest_240023, src_240024, ti_240025) {
  var result_245219 = null;

    switch (ti_240025.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(is_fat_pointer_235401(ti_240025))) {
      result_245219 = src_240024;
      }
      else {
        result_245219 = [src_240024[0], src_240024[1]];
      }
      
      break;
    case 19:
            if (dest_240023 === null || dest_240023 === undefined) {
        dest_240023 = {};
      }
      else {
        for (var key in dest_240023) { delete dest_240023[key]; }
      }
      for (var key in src_240024) { dest_240023[key] = src_240024[key]; }
      result_245219 = dest_240023;
    
      break;
    case 18:
    case 17:
      if (!((ti_240025.base == null))) {
      result_245219 = nimCopy(dest_240023, src_240024, ti_240025.base);
      }
      else {
      if ((ti_240025.kind == 17)) {
      result_245219 = (dest_240023 === null || dest_240023 === undefined) ? {m_type: ti_240025} : dest_240023;
      }
      else {
        result_245219 = (dest_240023 === null || dest_240023 === undefined) ? {} : dest_240023;
      }
      }
      nimCopyAux(result_245219, src_240024, ti_240025.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_240024 === null) {
        result_245219 = null;
      }
      else {
        if (dest_240023 === null || dest_240023 === undefined) {
          dest_240023 = new Array(src_240024.length);
        }
        else {
          dest_240023.length = src_240024.length;
        }
        result_245219 = dest_240023;
        for (var i = 0; i < src_240024.length; ++i) {
          result_245219[i] = nimCopy(result_245219[i], src_240024[i], ti_240025.base);
        }
      }
    
      break;
    case 28:
            if (src_240024 !== null) {
        result_245219 = src_240024.slice(0);
      }
    
      break;
    default: 
      result_245219 = src_240024;
      break;
    }

  return result_245219;

}
function makeNimstrLit(c_225062) {
      var ln = c_225062.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_225062.charCodeAt(i);
  }
  return result;
  

  
}
function arrayConstr(len_250067, value_250068, typ_250069) {
        var result = new Array(len_250067);
    for (var i = 0; i < len_250067; ++i) result[i] = nimCopy(null, value_250068, typ_250069);
    return result;
  

  
}
function cstrToNimstr(c_225079) {
      var ln = c_225079.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_225079.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_225079.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}
function toJSStr(s_225096) {
                    var Tmp5;
            var Tmp7;

  var result_225097 = null;

    var res_225170 = new_seq_225128((s_225096 != null ? s_225096.length : 0));
    var i_225172 = 0;
    var j_225174 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_225172 < (s_225096 != null ? s_225096.length : 0))) break L2;
          var c_225175 = s_225096[i_225172];
          if ((c_225175 < 128)) {
          res_225170[j_225174] = String.fromCharCode(c_225175);
          i_225172 += 1;
          }
          else {
            var helper_225198 = new_seq_225128(0);
            L3: do {
                L4: while (true) {
                if (!true) break L4;
                  var code_225199 = c_225175.toString(16);
                  if (((code_225199 != null ? code_225199.length : 0) == 1)) {
                  if (helper_225198 != null) { helper_225198.push("%0"); } else { helper_225198 = ["%0"]; };
                  }
                  else {
                  if (helper_225198 != null) { helper_225198.push("%"); } else { helper_225198 = ["%"]; };
                  }
                  
                  if (helper_225198 != null) { helper_225198.push(code_225199); } else { helper_225198 = [code_225199]; };
                  i_225172 += 1;
                    if (((s_225096 != null ? s_225096.length : 0) <= i_225172)) Tmp5 = true; else {                      Tmp5 = (s_225096[i_225172] < 128);                    }                  if (Tmp5) {
                  break L3;
                  }
                  
                  c_225175 = s_225096[i_225172];
                }
            } while(false);
++excHandler;
            Tmp7 = framePtr;
            try {
            res_225170[j_225174] = decodeURIComponent(helper_225198.join(""));
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
            framePtr = Tmp7;
            res_225170[j_225174] = helper_225198.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Tmp7;
            }
          }
          
          j_225174 += 1;
        }
    } while(false);
    if (res_225170 === null) res_225170 = [];
               if (res_225170.length < j_225174) { for (var i=res_225170.length;i<j_225174;++i) res_225170.push(null); }
               else { res_225170.length = j_225174; };
    result_225097 = res_225170.join("");

  return result_225097;

}
function raiseException(e_190218, ename_190219) {
    e_190218.name = ename_190219;
    if ((excHandler == 0)) {
    unhandledException(e_190218);
    }
    
    e_190218.trace = nimCopy(null, raw_write_stack_trace_180059(), NTI112);
    throw e_190218;

  
}
function addInt(a_230403, b_230404) {
        var result = a_230403 + b_230404;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}
function rawEcho() {
          var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

  
}
var ConstSet2 = setConstr([97, 122], [65, 90], [48, 57], 95);
var ConstSet3 = setConstr([97, 122], [65, 90], [48, 57], 95);
var ConstSet4 = setConstr([48, 57]);
var ConstSet5 = setConstr([48, 57]);
var ConstSet6 = setConstr(101, 69);
var ConstSet7 = setConstr([48, 57]);
var ConstSet8 = setConstr([48, 57]);
function nimParseBiggestFloat(s_275076, number_275078, number_275078_Idx, start_275079) {
  var result_275081 = 0;

  var F={procname:"system.nimParseBiggestFloat",prev:framePtr,filename:"jssys.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 686;
    var esign_275082 = 1.0000000000000000e+000;
    F.line = 687;
    var sign_275083 = 1.0000000000000000e+000;
    F.line = 688;
    var i_275084 = start_275079;
    F.line = 689;
    var exponent_275085 = 0;
    F.line = 690;
    var flags_275086 = 0;
    F.line = 691;
    number_275078[number_275078_Idx] = 0.0;
    if ((s_275076[i_275084] == 43)) {
    F.line = 692;
    i_275084 += 1;
    }
    else {
    if ((s_275076[i_275084] == 45)) {
    F.line = 694;
    sign_275083 = -1.0000000000000000e+000;
    F.line = 695;
    i_275084 += 1;
    }
    }
    if (((s_275076[i_275084] == 78) || (s_275076[i_275084] == 110))) {
    if (((s_275076[(i_275084 + 1)] == 65) || (s_275076[(i_275084 + 1)] == 97))) {
    if (((s_275076[(i_275084 + 2)] == 78) || (s_275076[(i_275084 + 2)] == 110))) {
    if (!((ConstSet2[s_275076[(i_275084 + 3)]] != undefined))) {
    F.line = 700;
    number_275078[number_275078_Idx] = NaN;
    F.line = 701;
    result_275081 = ((i_275084 + 3) - start_275079);
    break BeforeRet;
    }
    
    }
    
    }
    
    F.line = 702;
    result_275081 = 0;
    break BeforeRet;
    }
    
    if (((s_275076[i_275084] == 73) || (s_275076[i_275084] == 105))) {
    if (((s_275076[(i_275084 + 1)] == 78) || (s_275076[(i_275084 + 1)] == 110))) {
    if (((s_275076[(i_275084 + 2)] == 70) || (s_275076[(i_275084 + 2)] == 102))) {
    if (!((ConstSet3[s_275076[(i_275084 + 3)]] != undefined))) {
    F.line = 707;
    number_275078[number_275078_Idx] = (Infinity * sign_275083);
    F.line = 708;
    result_275081 = ((i_275084 + 3) - start_275079);
    break BeforeRet;
    }
    
    }
    
    }
    
    F.line = 709;
    result_275081 = 0;
    break BeforeRet;
    }
    
    L1: do {
      F.line = 710;
        L2: while (true) {
        if (!(ConstSet4[s_275076[i_275084]] != undefined)) break L2;
          F.line = 712;
          flags_275086 = (flags_275086 | 1);
          F.line = 713;
          number_275078[number_275078_Idx] = ((number_275078[number_275078_Idx] * 1.0000000000000000e+001) + to_float_26459((s_275076[i_275084] - 48)));
          F.line = 714;
          i_275084 += 1;
          L3: do {
            F.line = 715;
              L4: while (true) {
              if (!(s_275076[i_275084] == 95)) break L4;
                F.line = 715;
                i_275084 += 1;
              }
          } while(false);
        }
    } while(false);
    if ((s_275076[i_275084] == 46)) {
    F.line = 718;
    var hd_290029 = 1.0000000000000000e+000;
    F.line = 719;
    i_275084 += 1;
    L5: do {
      F.line = 720;
        L6: while (true) {
        if (!(ConstSet5[s_275076[i_275084]] != undefined)) break L6;
          F.line = 722;
          flags_275086 = (flags_275086 | 2);
          F.line = 723;
          number_275078[number_275078_Idx] = ((number_275078[number_275078_Idx] * 1.0000000000000000e+001) + to_float_26459((s_275076[i_275084] - 48)));
          F.line = 724;
          hd_290029 = (hd_290029 * 1.0000000000000000e+001);
          F.line = 725;
          i_275084 += 1;
          L7: do {
            F.line = 726;
              L8: while (true) {
              if (!(s_275076[i_275084] == 95)) break L8;
                F.line = 726;
                i_275084 += 1;
              }
          } while(false);
        }
    } while(false);
    F.line = 727;
    number_275078[number_275078_Idx] = (number_275078[number_275078_Idx] / hd_290029);
    }
    
    if ((flags_275086 == 0)) {
    F.line = 729;
    result_275081 = 0;
    break BeforeRet;
    }
    
    if ((ConstSet6[s_275076[i_275084]] != undefined)) {
    F.line = 732;
    i_275084 += 1;
    if ((s_275076[i_275084] == 43)) {
    F.line = 734;
    i_275084 += 1;
    }
    else {
    if ((s_275076[i_275084] == 45)) {
    F.line = 736;
    esign_275082 = -1.0000000000000000e+000;
    F.line = 737;
    i_275084 += 1;
    }
    }
    if (!((ConstSet7[s_275076[i_275084]] != undefined))) {
    F.line = 739;
    result_275081 = 0;
    break BeforeRet;
    }
    
    L9: do {
      F.line = 740;
        L10: while (true) {
        if (!(ConstSet8[s_275076[i_275084]] != undefined)) break L10;
          F.line = 741;
          exponent_275085 = (((exponent_275085 * 10) + s_275076[i_275084]) - 48);
          F.line = 742;
          i_275084 += 1;
          L11: do {
            F.line = 743;
              L12: while (true) {
              if (!(s_275076[i_275084] == 95)) break L12;
                F.line = 743;
                i_275084 += 1;
              }
          } while(false);
        }
    } while(false);
    }
    
    F.line = 745;
    var hd_310029 = ten_to_the_power_of_275046(exponent_275085);
    if ((0.0 < esign_275082)) {
    F.line = 746;
    number_275078[number_275078_Idx] = (number_275078[number_275078_Idx] * hd_310029);
    }
    else {
      F.line = 747;
      number_275078[number_275078_Idx] = (number_275078[number_275078_Idx] / hd_310029);
    }
    
    F.line = 749;
    number_275078[number_275078_Idx] = (number_275078[number_275078_Idx] * sign_275083);
    F.line = 750;
    result_275081 = (i_275084 - start_275079);
  } while (false);
  framePtr = F.prev;

  return result_275081;

}
function chckIndx(i_250086, a_250087, b_250088) {
      var Tmp1;

  var result_250089 = 0;

  BeforeRet: do {
      if (!(a_250087 <= i_250086)) Tmp1 = false; else {        Tmp1 = (i_250086 <= b_250088);      }    if (Tmp1) {
    result_250089 = i_250086;
    break BeforeRet;
    }
    else {
    raiseIndexError(i_250086, a_250087, b_250088);
    }
    
  } while (false);

  return result_250089;

}
function addChar(x_275031, c_275032) {
    x_275031.push(c_275032);

  
}
var ConstSet9 = setConstr(101, 100);
function chckRange(i_255016, a_255017, b_255018) {
      var Tmp1;

  var result_255019 = 0;

  BeforeRet: do {
      if (!(a_255017 <= i_255016)) Tmp1 = false; else {        Tmp1 = (i_255016 <= b_255018);      }    if (Tmp1) {
    result_255019 = i_255016;
    break BeforeRet;
    }
    else {
    raiseRangeError();
    }
    
  } while (false);

  return result_255019;

}
var nim_program_result = 0;
var global_raise_hook_142018 = [null];
var local_raise_hook_142023 = [null];
var out_of_mem_hook_142026 = [null];
var unhandled_exception_hook_142031 = [null];
if (!Math.trunc) {
  Math.trunc = function(v) {
    v = +v;
    if (!isFinite(v)) return v;
    return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
  };
}

var env_computed_10170810 = [false];
var environment_10170812 = [null];
function is_fat_pointer_235401(ti_235403) {
  var result_235404 = false;

  BeforeRet: do {
    result_235404 = !((ConstSet1[ti_235403.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_235404;

}
function nimCopyAux(dest_240028, src_240029, n_240031) {
    switch (n_240031.kind) {
    case 0:
      break;
    case 1:
            dest_240028[n_240031.offset] = nimCopy(dest_240028[n_240031.offset], src_240029[n_240031.offset], n_240031.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_240031.sons.length; i++) {
      nimCopyAux(dest_240028, src_240029, n_240031.sons[i]);
    }
    
      break;
    case 3:
            dest_240028[n_240031.offset] = nimCopy(dest_240028[n_240031.offset], src_240029[n_240031.offset], n_240031.typ);
      for (var i = 0; i < n_240031.sons.length; ++i) {
        nimCopyAux(dest_240028, src_240029, n_240031.sons[i][1]);
      }
    
      break;
    }

  
}
function add_142042(x_142045, x_142045_Idx, y_142046) {
          if (x_142045[x_142045_Idx] === null) { x_142045[x_142045_Idx] = []; }
      var off = x_142045[x_142045_Idx].length;
      x_142045[x_142045_Idx].length += y_142046.length;
      for (var i = 0; i < y_142046.length; ++i) {
        x_142045[x_142045_Idx][off+i] = y_142046.charCodeAt(i);
      }
    

  
}
function aux_write_stack_trace_160038(f_160040) {
          var Tmp3;

  var result_160041 = [null];

    var it_160049 = f_160040;
    var i_160051 = 0;
    var total_160053 = 0;
    var temp_frames_160060 = arrayConstr(64, {Field0: null, Field1: 0}, NTI160043);
    L1: do {
        L2: while (true) {
          if (!!((it_160049 == null))) Tmp3 = false; else {            Tmp3 = (i_160051 <= 63);          }        if (!Tmp3) break L2;
          temp_frames_160060[i_160051].Field0 = it_160049.procname;
          temp_frames_160060[i_160051].Field1 = it_160049.line;
          i_160051 += 1;
          total_160053 += 1;
          it_160049 = it_160049.prev;
        }
    } while(false);
    L4: do {
        L5: while (true) {
        if (!!((it_160049 == null))) break L5;
          total_160053 += 1;
          it_160049 = it_160049.prev;
        }
    } while(false);
    result_160041[0] = nimCopy(null, [], NTI112);
    if (!((total_160053 == i_160051))) {
    if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(makeNimstrLit("(")); } else { result_160041[0] = makeNimstrLit("("); };
    if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(cstrToNimstr(((total_160053 - i_160051))+"")); } else { result_160041[0] = cstrToNimstr(((total_160053 - i_160051))+"").slice(); };
    if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_160041[0] = makeNimstrLit(" calls omitted) ...\x0A"); };
    }
    
    L6: do {
      var j_175236 = 0;
      var colontmp__10370073 = 0;
      colontmp__10370073 = (i_160051 - 1);
      var res_10370078 = colontmp__10370073;
      L7: do {
          L8: while (true) {
          if (!(0 <= res_10370078)) break L8;
            j_175236 = res_10370078;
            add_142042(result_160041, 0, temp_frames_160060[j_175236].Field0);
            if ((0 < temp_frames_160060[j_175236].Field1)) {
            if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(makeNimstrLit(", line: ")); } else { result_160041[0] = makeNimstrLit(", line: "); };
            if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(cstrToNimstr((temp_frames_160060[j_175236].Field1)+"")); } else { result_160041[0] = cstrToNimstr((temp_frames_160060[j_175236].Field1)+"").slice(); };
            }
            
            if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(makeNimstrLit("\x0A")); } else { result_160041[0] = makeNimstrLit("\x0A"); };
            res_10370078 -= 1;
          }
      } while(false);
    } while(false);

  return result_160041[0];

}
function raw_write_stack_trace_180059() {
  var result_180061 = null;

    if (!((framePtr == null))) {
    result_180061 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A") || []).concat(aux_write_stack_trace_160038(framePtr) || []), NTI112);
    }
    else {
      result_180061 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI112);
    }
    

  return result_180061;

}
function new_seq_225128(len_225131) {
  var result_225133 = null;

  var F={procname:"newSeq.newSeq",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 643;
    result_225133 = new Array(len_225131); for (var i=0;i<len_225131;++i) {result_225133[i]=null;}  framePtr = F.prev;

  return result_225133;

}
function unhandledException(e_185059) {
    var buf_185060 = [[]];
    if (!(((e_185059.message != null ? e_185059.message.length : 0) == 0))) {
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_185060[0] = makeNimstrLit("Error: unhandled exception: "); };
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(e_185059.message); } else { buf_185060[0] = e_185059.message.slice(); };
    }
    else {
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_185060[0] = makeNimstrLit("Error: unhandled exception"); };
    }
    
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit(" [")); } else { buf_185060[0] = makeNimstrLit(" ["); };
    add_142042(buf_185060, 0, e_185059.name);
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit("]\x0A")); } else { buf_185060[0] = makeNimstrLit("]\x0A"); };
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(raw_write_stack_trace_180059()); } else { buf_185060[0] = raw_write_stack_trace_180059().slice(); };
    var cbuf_190201 = toJSStr(buf_185060[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_190201);
  }
  else {
    throw cbuf_190201;
  }
  

  
}
function param_count_10295015() {
  var result_10295017 = 0;

  var F={procname:"os.paramCount",prev:framePtr,filename:"os.nim",line:0};
  framePtr = F;
    F.line = 2693;
    raiseException({message: makeNimstrLit("paramCount is not implemented on Nintendo Switch"), parent: null, m_type: NTI6227, errorCode: 0, name: null, trace: null, up: null}, "OSError");
  framePtr = F.prev;

  return result_10295017;

}
function param_str_10290221(i_10290223) {
  var result_10290224 = null;

  var F={procname:"os.paramStr",prev:framePtr,filename:"os.nim",line:0};
  framePtr = F;
    F.line = 2690;
    raiseException({message: makeNimstrLit("paramStr is not implemented on Nintendo Switch"), parent: null, m_type: NTI6227, errorCode: 0, name: null, trace: null, up: null}, "OSError");
  framePtr = F.prev;

  return result_10290224;

}
function raiseOverflow() {
    raiseException({message: makeNimstrLit("over- or underflow"), parent: null, m_type: NTI6237, name: null, trace: null, up: null}, "OverflowError");

  
}
function command_line_params_10300201() {
  var result_10300204 = null;

  var F={procname:"os.commandLineParams",prev:framePtr,filename:"os.nim",line:0};
  framePtr = F;
    F.line = 2770;
    result_10300204 = nimCopy(null, [], NTI10300219);
    L1: do {
      F.line = 2771;
      var i_10300228 = 0;
      F.line = 66;
      var colontmp__10370063 = 0;
      F.line = 2771;
      colontmp__10370063 = param_count_10295015();
      F.line = 77;
      var res_10370064 = 1;
      L2: do {
        F.line = 78;
          L3: while (true) {
          if (!(res_10370064 <= colontmp__10370063)) break L3;
            F.line = 2771;
            i_10300228 = res_10370064;
            F.line = 2772;
            if (result_10300204 != null) { result_10300204.push(param_str_10290221(i_10300228)); } else { result_10300204 = [param_str_10290221(i_10300228)]; };
            F.line = 80;
            res_10370064 = addInt(res_10370064, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_10300204;

}
function to_float_26459(i_26461) {
  var result_26462 = 0.0;

  var F={procname:"system.toFloat",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1372;
    result_26462 = i_26461;
  framePtr = F.prev;

  return result_26462;

}
function ten_to_the_power_of_275046(b_275048) {
  var result_275049 = 0.0;

  var F={procname:"system.tenToThePowerOf",prev:framePtr,filename:"jssys.nim",line:0};
  framePtr = F;
    F.line = 669;
    var b_275050 = b_275048;
    F.line = 670;
    var a_275051 = 1.0000000000000000e+001;
    F.line = 671;
    result_275049 = 1.0000000000000000e+000;
    L1: do {
      F.line = 672;
        L2: while (true) {
        if (!true) break L2;
          if (((b_275050 & 1) == 1)) {
          F.line = 674;
          result_275049 = (result_275049 * a_275051);
          }
          
          F.line = 675;
          b_275050 = (b_275050 >> 1);
          if ((b_275050 == 0)) {
          F.line = 676;
          break L1;
          }
          
          F.line = 677;
          a_275051 = (a_275051 * a_275051);
        }
    } while(false);
  framePtr = F.prev;

  return result_275049;

}
function npuParseFloat(s_870023, number_870025, number_870025_Idx, start_870026) {
  var result_870028 = 0;

  var F={procname:"parseutils.parseFloat",prev:framePtr,filename:"parseutils.nim",line:0};
  framePtr = F;
    F.line = 566;
    var bf_870029 = [0.0];
    F.line = 567;
    result_870028 = nimParseBiggestFloat(s_870023, bf_870029, 0, start_870026);
    if (!((result_870028 == 0))) {
    F.line = 569;
    number_870025[number_870025_Idx] = bf_870029[0];
    }
    
  framePtr = F.prev;

  return result_870028;

}
function nsuParseFloat(s_9180017) {
      var Tmp1;

  var result_9180018 = [0.0];

  var F={procname:"strutils.parseFloat",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
    F.line = 1125;
    var l_9180020 = npuParseFloat(s_9180017, result_9180018, 0, 0);
      if (!((l_9180020 == (s_9180017 != null ? s_9180017.length : 0)))) Tmp1 = true; else {        Tmp1 = (l_9180020 == 0);      }    if (Tmp1) {
    F.line = 1127;
    raiseException({message: (makeNimstrLit("invalid float: ") || []).concat(s_9180017 || []), parent: null, m_type: NTI6243, name: null, trace: null, up: null}, "ValueError");
    }
    
  framePtr = F.prev;

  return result_9180018[0];

}
function raiseIndexError(i_210047, a_210048, b_210049) {
    var Tmp1;

    if ((b_210049 < a_210048)) {
    Tmp1 = makeNimstrLit("index out of bounds, the container is empty");
    }
    else {
    Tmp1 = (makeNimstrLit("index ") || []).concat(cstrToNimstr((i_210047)+"") || [],makeNimstrLit(" not in ") || [],cstrToNimstr((a_210048)+"") || [],makeNimstrLit(" .. ") || [],cstrToNimstr((b_210049)+"") || []);
    }
    
    raiseException({message: nimCopy(null, Tmp1, NTI112), parent: null, m_type: NTI6249, name: null, trace: null, up: null}, "IndexError");

  
}
function db_error_625034(db_625036) {
  var F={procname:"db_sqlite.dbError",prev:framePtr,filename:"db_sqlite.nim",line:0};
  framePtr = F;
    F.line = 139;
    var e_625038 = null;
    F.line = 140;
    e_625038 = {m_type: NTI624016, parent: null, name: null, message: null, trace: null, up: null};
    F.line = 141;
    e_625038.message = nimCopy(null, cstrToNimstr(sqlite3_errmsg(db_625036)), NTI112);
    F.line = 142;
    raiseException(e_625038, "DbError");
  framePtr = F.prev;

  
}
function open_700014(connection_700016, user_700017, password_700018, database_700019) {
  var result_700020 = null;

  var F={procname:"db_sqlite.open",prev:framePtr,filename:"db_sqlite.nim",line:0};
  framePtr = F;
    F.line = 622;
    var db_700021 = [null];
    if ((sqlite3_open(toJSStr(connection_700016), db_700021, 0) == 0)) {
    F.line = 624;
    result_700020 = db_700021[0];
    }
    else {
      F.line = 626;
    db_error_625034(db_700021[0]);
    }
    
  framePtr = F.prev;

  return result_700020;

}
function sys_fatal_102618(message_102622) {
  var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"fatal.nim",line:0};
  framePtr = F;
    F.line = 49;
    raiseException({message: nimCopy(null, message_102622, NTI112), m_type: NTI6241, parent: null, name: null, trace: null, up: null}, "AssertionError");
  framePtr = F.prev;

  
}
function raise_assert_102614(msg_102616) {
  var F={procname:"assertions.raiseAssert",prev:framePtr,filename:"assertions.nim",line:0};
  framePtr = F;
    F.line = 22;
    sys_fatal_102618(msg_102616);
  framePtr = F.prev;

  
}
function failed_assert_impl_102680(msg_102682) {
  var F={procname:"assertions.failedAssertImpl",prev:framePtr,filename:"assertions.nim",line:0};
  framePtr = F;
    F.line = 29;
    raise_assert_102614(msg_102682);
  framePtr = F.prev;

  
}
function db_quote_625058(s_625060) {
  var result_625061 = null;

  var F={procname:"db_sqlite.dbQuote",prev:framePtr,filename:"db_sqlite.nim",line:0};
  framePtr = F;
    F.line = 151;
    result_625061 = nimCopy(null, makeNimstrLit("\'"), NTI112);
    L1: do {
      F.line = 152;
      var c_625063 = 0;
      F.line = 202;
      var i_10370116 = 0;
      F.line = 203;
      var l_10370117 = (s_625060 != null ? s_625060.length : 0);
      L2: do {
        F.line = 204;
          L3: while (true) {
          if (!(i_10370116 < l_10370117)) break L3;
            F.line = 152;
            c_625063 = s_625060[chckIndx(i_10370116, 0, (s_625060 != null ? s_625060.length : 0)+0-1)-0];
            if ((c_625063 == 39)) {
            F.line = 153;
            if (result_625061 != null) { result_625061 = (result_625061).concat(makeNimstrLit("\'\'")); } else { result_625061 = makeNimstrLit("\'\'"); };
            }
            else {
              F.line = 154;
            if (result_625061 != null) { addChar(result_625061, c_625063); } else { result_625061 = [c_625063]; };
            }
            
            F.line = 206;
            i_10370116 = addInt(i_10370116, 1);
            if (!(((s_625060 != null ? s_625060.length : 0) == l_10370117))) {
            F.line = 207;
            failed_assert_impl_102680(makeNimstrLit("C:\\Users\\Chase\\scoop\\apps\\nim\\current\\lib\\system\\iterators.nim(207, 11) `len(a) == L` the length of the string changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    F.line = 155;
    if (result_625061 != null) { addChar(result_625061, 39); } else { result_625061 = [39]; };
  framePtr = F.prev;

  return result_625061;

}
function db_format_625077(formatstr_625079, args_625081) {
  var result_625082 = null;

  var F={procname:"db_sqlite.dbFormat",prev:framePtr,filename:"db_sqlite.nim",line:0};
  framePtr = F;
    F.line = 158;
    result_625082 = nimCopy(null, [], NTI112);
    F.line = 159;
    var a_625084 = 0;
    L1: do {
      F.line = 160;
      var c_625086 = 0;
      F.line = 200;
      var colontmp__10370110 = null;
      F.line = 160;
      colontmp__10370110 = formatstr_625079;
      F.line = 202;
      var i_10370112 = 0;
      F.line = 203;
      var l_10370113 = (colontmp__10370110 != null ? colontmp__10370110.length : 0);
      L2: do {
        F.line = 204;
          L3: while (true) {
          if (!(i_10370112 < l_10370113)) break L3;
            F.line = 160;
            c_625086 = colontmp__10370110[chckIndx(i_10370112, 0, (colontmp__10370110 != null ? colontmp__10370110.length : 0)+0-1)-0];
            if ((c_625086 == 63)) {
            F.line = 162;
            if (result_625082 != null) { result_625082 = (result_625082).concat(db_quote_625058(args_625081[chckIndx(a_625084, 0, (args_625081 != null ? args_625081.length : 0)+0-1)-0])); } else { result_625082 = db_quote_625058(args_625081[chckIndx(a_625084, 0, (args_625081 != null ? args_625081.length : 0)+0-1)-0]).slice(); };
            F.line = 163;
            a_625084 = addInt(a_625084, 1);
            }
            else {
              F.line = 165;
            if (result_625082 != null) { addChar(result_625082, c_625086); } else { result_625082 = [c_625086]; };
            }
            
            F.line = 206;
            i_10370112 = addInt(i_10370112, 1);
            if (!(((colontmp__10370110 != null ? colontmp__10370110.length : 0) == l_10370113))) {
            F.line = 207;
            failed_assert_impl_102680(makeNimstrLit("C:\\Users\\Chase\\scoop\\apps\\nim\\current\\lib\\system\\iterators.nim(207, 11) `len(a) == L` the length of the string changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_625082;

}
function raiseRangeError() {
    raiseException({message: makeNimstrLit("value out of range"), parent: null, m_type: NTI6253, name: null, trace: null, up: null}, "RangeError");

  
}
function try_exec_625106(db_625108, query_625109, args_625111) {
  var result_625112 = false;

  var F={procname:"db_sqlite.tryExec",prev:framePtr,filename:"db_sqlite.nim",line:0};
  framePtr = F;
    if (!(!((db_625108 == null)))) {
    F.line = 180;
    failed_assert_impl_102680(makeNimstrLit("C:\\Users\\Chase\\scoop\\apps\\nim\\current\\lib\\impure\\db_sqlite.nim(180, 9) `not db.isNil` Database not connected."));
    }
    
    F.line = 181;
    var q_635201 = db_format_625077(query_625109, args_625111);
    F.line = 182;
    var stmt_635203 = [null];
    if ((sqlite3_prepare_v2(db_625108, toJSStr(q_635201), (q_635201 != null ? q_635201.length : 0), stmt_635203, 0, null, 0) == 0)) {
    F.line = 184;
    var x_635205 = sqlite3_step(stmt_635203[0]);
    if ((ConstSet9[chckRange(x_635205, 0, 65535)] != undefined)) {
    F.line = 186;
    result_625112 = (sqlite3_finalize(stmt_635203[0]) == 0);
    }
    else {
      F.line = 188;
      sqlite3_finalize(stmt_635203[0]);
      F.line = 189;
      result_625112 = false;
    }
    
    }
    
  framePtr = F.prev;

  return result_625112;

}
function exec_640052(db_640054, query_640055, args_640057) {
  var F={procname:"db_sqlite.exec",prev:framePtr,filename:"db_sqlite.nim",line:0};
  framePtr = F;
    if (!(try_exec_625106(db_640054, query_640055, args_640057))) {
    F.line = 207;
    db_error_625034(db_640054);
    }
    
  framePtr = F.prev;

  
}
function close_695054(db_695056) {
  var F={procname:"db_sqlite.close",prev:framePtr,filename:"db_sqlite.nim",line:0};
  framePtr = F;
    if (!((sqlite3_close(db_695056) == 0))) {
    F.line = 602;
    db_error_625034(db_695056);
    }
    
  framePtr = F.prev;

  
}
function main_10357014() {
  var F={procname:"insert.main",prev:framePtr,filename:"insert.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 20;
    var args_10357016 = command_line_params_10300201();
    F.line = 21;
    var v1_10357017 = 0.0;
    F.line = 21;
    var v2_10357018 = 0.0;
    F.line = 21;
    var v3_10357019 = 0.0;
    F.line = 21;
    var p1_10357020 = 0.0;
    F.line = 21;
    var p2_10357021 = 0.0;
    if (!((param_count_10295015() == 5))) {
    F.line = 24;
    rawEcho(makeNimstrLit("ERROR: INCORRECT USAGE"));
    F.line = 25;
    rawEcho(makeNimstrLit("Usage: insert p1 p2 p3 p4 p5\x0A"), makeNimstrLit("Command: insert\x0A"), makeNimstrLit("Parameters: database values, p1 -> p5\x0A"), makeNimstrLit("Inserts database values into data.db database"));
    F.line = 29;
    break BeforeRet;
    }
    else {
      F.line = 31;
      v1_10357017 = nsuParseFloat(args_10357016[chckIndx(0, 0, (args_10357016 != null ? args_10357016.length : 0)+0-1)-0]);
      F.line = 32;
      v2_10357018 = nsuParseFloat(args_10357016[chckIndx(1, 0, (args_10357016 != null ? args_10357016.length : 0)+0-1)-0]);
      F.line = 33;
      v3_10357019 = nsuParseFloat(args_10357016[chckIndx(2, 0, (args_10357016 != null ? args_10357016.length : 0)+0-1)-0]);
      F.line = 34;
      p1_10357020 = nsuParseFloat(args_10357016[chckIndx(3, 0, (args_10357016 != null ? args_10357016.length : 0)+0-1)-0]);
      F.line = 35;
      p2_10357021 = nsuParseFloat(args_10357016[chckIndx(4, 0, (args_10357016 != null ? args_10357016.length : 0)+0-1)-0]);
    }
    
    F.line = 38;
    var db_10360015 = open_700014(makeNimstrLit("data.db"), [], [], []);
    F.line = 41;
    exec_640052(db_10360015, makeNimstrLit("            CREATE TABLE IF NOT EXISTS data(\x0A              voltage1 REAL,\x0A              voltage2 REAL,\x0A              voltage3 REAL,\x0A              position1 REAL,\x0A              position2 REAL\x0A            );\x0A          "), []);
    F.line = 52;
    exec_640052(db_10360015, makeNimstrLit("            INSERT INTO data (\x0A                voltage1,\x0A                voltage2,\x0A                voltage3,\x0A                position1,\x0A                position2\x0A              )\x0A              VALUES (?,?,?,?,?);\x0A          "), [cstrToNimstr((v1_10357017)+""), cstrToNimstr((v2_10357018)+""), cstrToNimstr((v3_10357019)+""), cstrToNimstr((p1_10357020)+""), cstrToNimstr((p2_10357021)+"")]);
    F.line = 64;
    close_695054(db_10360015);
  } while (false);
  framePtr = F.prev;

  
}
main_10357014();
